//--------------------------------------------------------------------
// area.mq4
// Предназначен для использования в качестве примера в учебнике MQL4.
//--------------------------------------------------------------------
int start()                             // Специальная функция start()
  {
//--------------------------------------------------------------------
   int
   L,                                  // Длина нити
   S_etalon=1500000,                   // Заданная площадь (мм2)
   S,                                  // Площадь прямоугольника
   a,b,s;                              // Текущие стороны и площадь
//--------------------------------------------------------------------
   while(true)                         // Внешний цикл по длинам нити
     {                                 // Начало внешнего цикла
      L=L+1000;                        // Текущее значение нити в мм
      //--------------------------------------------------------------------
      S=0;                             // Начальное значение.. 
      // ..для каждого размера
      for(a=1; a<L/2; a++)             // Заголовок оператора цикла
        {                              // Начало внутреннего цикла
         b=(L/2) - a;                  // Текущие значения сторон
         s=a * b;                      // Текущее значение площади
         if (s<=S)                     // Выбираем большее значение
            break;                     // Выход из внутреннего цикла
         S=s;                          // Запоминаем лучшее значение
        }                              // Конец внутреннего цикла
      //--------------------------------------------------------------------
      if (S>=S_etalon)                 // Выбираем большее значение
        {
         Alert("Подходит нить длиной ",L/1000," м.");// Сообщение 
         break;                         // Выход из внешнего цикла
        }
     }                                 // Конец внешнего цикла
//--------------------------------------------------------------------
   return;                              // Оператор выхода из функции
  }
//--------------------------------------------------------------------